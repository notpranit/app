****PROJECT SOURCE CODE****

****app.py

from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
import requests
from dateutil import parser

app = Flask(__name__)

# SQLAlchemy configuration for SQLite database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///transactions.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Add this line to avoid warning
db = SQLAlchemy(app)

# Transaction Model
class Transaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100))
    description = db.Column(db.String(200))
    price = db.Column(db.Float)
    category = db.Column(db.String(50))
    sold = db.Column(db.Boolean)
    date_of_sale = db.Column(db.DateTime)

    def __repr__(self):
        return f"Transaction('{self.title}', '{self.date_of_sale}')"

# Create the database
with app.app_context():
    db.create_all()

# Initialize the database with the fetched data
def initialize_database(data):
    for item in data:
        # Use dateutil parser to automatically handle various datetime formats
        date_of_sale = parser.isoparse(item['dateOfSale'])

        # Create a new Transaction object for each record        
        transaction = Transaction(
            title=item['title'],
            description=item['description'],
            price=item['price'],
            category=item['category'],
            sold=item['sold'],
            date_of_sale=date_of_sale
        )

        # Add to the session and commit to the database
        db.session.add(transaction)
    db.session.commit()

# Fetch data from the API and initialize the database
def fetch_and_initialize_database():
    DATA_URL = "https://s3.amazonaws.com/roxiler.com/product_transaction.json"
    response = requests.get(DATA_URL)
    
    # Check if the request was successful
    if response.status_code == 200:
        data = response.json()  # Parse JSON data
        initialize_database(data)  # Call the initialize_database function with fetched data
    else:
        print(f"Error fetching data: {response.status_code}")

# Initialize the database with seed data
with app.app_context():
    fetch_and_initialize_database()

# Define route to get transactions
@app.route('/transactions', methods=['GET'])
def get_transactions():
    month = int(request.args.get('month', 1))  # Default to January
    search = request.args.get('search', '').lower()
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 10))

    # Filter by month
    filtered_transactions = Transaction.query.filter(
        db.extract('month', Transaction.date_of_sale) == month
    )

    # Apply search filters if provided
    if search:
        filtered_transactions = filtered_transactions.filter(
            (Transaction.title.ilike(f'%{search}%')) |
            (Transaction.description.ilike(f'%{search}%')) |
            (Transaction.price.ilike(f'%{search}%'))
        )

    # Pagination
    transactions = filtered_transactions.paginate(page, per_page, False).items

    # Convert to a list of dictionaries (JSON format)
    result = [{
        "id": t.id,
        "title": t.title,
        "description": t.description,
        "price": t.price,
        "category": t.category,
        "sold": t.sold,
        "dateOfSale": t.date_of_sale.strftime('%Y-%m-%d')
    } for t in transactions]

    return jsonify(result)

# Run the app
if __name__ == '__main__':
    app.run(debug=True)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


*****project

pip install flask pandas requests

Requirement already satisfied: flask in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (3.0.3)
Requirement already satisfied: pandas in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (2.2.3)
Requirement already satisfied: requests in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (2.32.3)
Requirement already satisfied: Werkzeug>=3.0.0 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask) (3.0.4)
Requirement already satisfied: Jinja2>=3.1.2 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask) (3.1.4)
Requirement already satisfied: itsdangerous>=2.1.2 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask) (2.2.0)
Requirement already satisfied: click>=8.1.3 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask) (8.1.7)
Requirement already satisfied: blinker>=1.6.2 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask) (1.8.2)
Requirement already satisfied: numpy>=1.26.0 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from pandas) (2.1.2)
Requirement already satisfied: python-dateutil>=2.8.2 in c:\users\prajw\appdata\roaming\python\python312\site-packages (from pandas) (2.9.0.post0)
Requirement already satisfied: pytz>=2020.1 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from pandas) (2024.2)
Requirement already satisfied: tzdata>=2022.7 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from pandas) (2024.2)
Requirement already satisfied: charset-normalizer<4,>=2 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from requests) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from requests) (3.10)
Requirement already satisfied: urllib3<3,>=1.21.1 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from requests) (2.2.3)
Requirement already satisfied: certifi>=2017.4.17 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from requests) (2024.8.30)
Requirement already satisfied: colorama in c:\users\prajw\appdata\roaming\python\python312\site-packages (from click>=8.1.3->flask) (0.4.6)
Requirement already satisfied: MarkupSafe>=2.0 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from Jinja2>=3.1.2->flask) (3.0.1)
Requirement already satisfied: six>=1.5 in c:\users\prajw\appdata\roaming\python\python312\site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)
Note: you may need to restart the kernel to use updated packages.

from flask import Flask, jsonify, request
import pandas as pd
import requests

app = Flask(__name__)

# Step 3: Fetch the data from the third-party API and initialize the database (in-memory)
DATA_URL = "https://s3.amazonaws.com/roxiler.com/product_transaction.json"
response = requests.get(DATA_URL)
data = response.json()

# Convert the JSON data into a pandas DataFrame
df = pd.DataFrame(data)

# Convert the dateOfSale to datetime to extract the month later
df['dateOfSale'] = pd.to_datetime(df['dateOfSale'])

# Helper function to filter by month
def filter_by_month(df, month):
    return df[df['dateOfSale'].dt.month == month]

# Step 4: Create the API to list all transactions (with search and pagination)
@app.route('/transactions', methods=['GET'])
def get_transactions():
    month = int(request.args.get('month', 1))  # Default to January
    search = request.args.get('search', '').lower()
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 10))

    # Filter by month
    filtered_df = filter_by_month(df, month)

    # Apply search filters if provided
    if search:
        filtered_df = filtered_df[
            filtered_df['title'].str.lower().str.contains(search) |
            filtered_df['description'].str.lower().str.contains(search) |
            filtered_df['price'].astype(str).str.contains(search)
        ]

    # Pagination
    start = (page - 1) * per_page
    end = start + per_page
    paginated_df = filtered_df.iloc[start:end]

    # Convert the DataFrame to a list of dictionaries (JSON format)
    transactions = paginated_df.to_dict(orient='records')
    return jsonify(transactions)

# Step 5: Create the API for statistics
@app.route('/statistics', methods=['GET'])
def get_statistics():
    month = int(request.args.get('month', 1))  # Default to January
    filtered_df = filter_by_month(df, month)

    total_sale_amount = filtered_df['price'].sum()
    total_sold_items = len(filtered_df[filtered_df['sold'] == True])
    total_not_sold_items = len(filtered_df[filtered_df['sold'] == False])

    stats = {
        "totalSaleAmount": total_sale_amount,
        "totalSoldItems": total_sold_items,
        "totalNotSoldItems": total_not_sold_items
    }
    return jsonify(stats)

# Step 6: Create the API for bar chart (price range)
@app.route('/bar-chart', methods=['GET'])
def get_bar_chart():
    month = int(request.args.get('month', 1))  # Default to January
    filtered_df = filter_by_month(df, month)

    # Define price ranges
    ranges = [(0, 100), (101, 200), (201, 300), (301, 400), (401, 500), 
              (501, 600), (601, 700), (701, 800), (801, 900), (901, float('inf'))]

    # Count the number of items in each price range
    bar_chart_data = []
    for lower, upper in ranges:
        count = len(filtered_df[(filtered_df['price'] >= lower) & (filtered_df['price'] <= upper)])
        bar_chart_data.append({
            "range": f"{lower}-{upper}" if upper != float('inf') else "901+",
            "count": count
        })

    return jsonify(bar_chart_data)

# Step 7: Create the API for pie chart (category distribution)
@app.route('/pie-chart', methods=['GET'])
def get_pie_chart():
    month = int(request.args.get('month', 1))  # Default to January
    filtered_df = filter_by_month(df, month)

    # Get unique categories and their item counts
    pie_chart_data = filtered_df['category'].value_counts().to_dict()
    return jsonify(pie_chart_data)

# Step 8: Create the combined API for all data
@app.route('/combined-data', methods=['GET'])
def get_combined_data():
    month = int(request.args.get('month', 1))  # Default to January
    
    # Fetch transactions, statistics, bar chart, and pie chart data
    transactions = get_transactions().json
    statistics = get_statistics().json
    bar_chart = get_bar_chart().json
    pie_chart = get_pie_chart().json

    # Combine all the data into one response
    combined_data = {
        "transactions": transactions,
        "statistics": statistics,
        "bar_chart": bar_chart,
        "pie_chart": pie_chart
    }
    return jsonify(combined_data)

if __name__ == "__main__":
    app.run(debug=True)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*****script.js


// scripts.js
const API_BASE_URL = "http://127.0.0.1:5000//api"; 

let currentPage = 1;
let selectedMonth = 3; // Default to March

document.addEventListener('DOMContentLoaded', function () {
  const monthSelect = document.getElementById('month');
  const searchInput = document.getElementById('search');
  const prevPageButton = document.getElementById('prev-page');
  const nextPageButton = document.getElementById('next-page');

  // Initialize with default month data
  loadTransactions();
  loadStatistics();
  loadCharts();

  // Month change event listener
  monthSelect.addEventListener('change', function () {
    selectedMonth = this.value;
    currentPage = 1;
    loadTransactions();
    loadStatistics();
    loadCharts();
  });

  // Search input event listener
  searchInput.addEventListener('input', function () {
    loadTransactions();
  });

  // Pagination buttons
  prevPageButton.addEventListener('click', function () {
    if (currentPage > 1) {
      currentPage--;
      loadTransactions();
    }
  });

  nextPageButton.addEventListener('click', function () {
    currentPage++;
    loadTransactions();
  });
});

function loadTransactions() {
  const search = document.getElementById('search').value || '';
  fetch(`${API_BASE_URL}/transactions?month=${selectedMonth}&search=${search}&page=${currentPage}`)
    .then(response => response.json())
    .then(data => {
      const transactionsBody = document.getElementById('transactions-body');
      transactionsBody.innerHTML = '';

      data.forEach(transaction => {
        const row = `<tr>
                      <td>${transaction.title}</td>
                      <td>${transaction.description}</td>
                      <td>${transaction.price}</td>
                      <td>${transaction.sold ? 'Yes' : 'No'}</td>
                    </tr>`;
        transactionsBody.innerHTML += row;
      });

      // Enable/Disable pagination buttons
      document.getElementById('prev-page').disabled = currentPage === 1;
      document.getElementById('next-page').disabled = data.length < 10;
    })
    .catch(error => console.error('Error fetching transactions:', error));
}

function loadStatistics() {
  fetch(`${API_BASE_URL}/statistics?month=${selectedMonth}`)
    .then(response => response.json())
    .then(data => {
      document.getElementById('total-sale').textContent = `Total Sale: ${data.totalSaleAmount}`;
      document.getElementById('sold-items').textContent = `Sold Items: ${data.totalSoldItems}`;
      document.getElementById('not-sold-items').textContent = `Not Sold Items: ${data.totalNotSoldItems}`;
    })
    .catch(error => console.error('Error fetching statistics:', error));
}

function loadCharts() {
  // Load Bar Chart Data
  fetch(`${API_BASE_URL}/bar-chart?month=${selectedMonth}`)
    .then(response => response.json())
    .then(data => {
      const labels = data.map(range => range.range);
      const counts = data.map(range => range.count);

      const ctxBar = document.getElementById('barChartCanvas').getContext('2d');
      new Chart(ctxBar, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Number of Items',
            data: counts,
            backgroundColor: 'rgba(75, 192, 192, 0.6)',
          }]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    });

  // Load Pie Chart Data
  fetch(`${API_BASE_URL}/pie-chart?month=${selectedMonth}`)
    .then(response => response.json())
    .then(data => {
      const labels = Object.keys(data);
      const counts = Object.values(data);

      const ctxPie = document.getElementById('pieChartCanvas').getContext('2d');
      new Chart(ctxPie, {
        type: 'pie',
        data: {
          labels: labels,
          datasets: [{
            label: 'Category Distribution',
            data: counts,
            backgroundColor: [
              'rgba(255, 99, 132, 0.6)',
              'rgba(54, 162, 235, 0.6)',
              'rgba(255, 206, 86, 0.6)',
              'rgba(75, 192, 192, 0.6)',
              'rgba(153, 102, 255, 0.6)',
            ]
          }]
        }
      });
    });
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


*****sqlalchemy

pip install flask_sqlalchemy

Collecting flask_sqlalchemy
  Downloading flask_sqlalchemy-3.1.1-py3-none-any.whl.metadata (3.4 kB)
Requirement already satisfied: flask>=2.2.5 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask_sqlalchemy) (3.0.3)
Collecting sqlalchemy>=2.0.16 (from flask_sqlalchemy)
  Downloading SQLAlchemy-2.0.35-cp312-cp312-win_amd64.whl.metadata (9.9 kB)
Requirement already satisfied: Werkzeug>=3.0.0 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask>=2.2.5->flask_sqlalchemy) (3.0.4)
Requirement already satisfied: Jinja2>=3.1.2 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask>=2.2.5->flask_sqlalchemy) (3.1.4)
Requirement already satisfied: itsdangerous>=2.1.2 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask>=2.2.5->flask_sqlalchemy) (2.2.0)
Requirement already satisfied: click>=8.1.3 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask>=2.2.5->flask_sqlalchemy) (8.1.7)
Requirement already satisfied: blinker>=1.6.2 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from flask>=2.2.5->flask_sqlalchemy) (1.8.2)
Collecting typing-extensions>=4.6.0 (from sqlalchemy>=2.0.16->flask_sqlalchemy)
  Downloading typing_extensions-4.12.2-py3-none-any.whl.metadata (3.0 kB)
Collecting greenlet!=0.4.17 (from sqlalchemy>=2.0.16->flask_sqlalchemy)
  Downloading greenlet-3.1.1-cp312-cp312-win_amd64.whl.metadata (3.9 kB)
Requirement already satisfied: colorama in c:\users\prajw\appdata\roaming\python\python312\site-packages (from click>=8.1.3->flask>=2.2.5->flask_sqlalchemy) (0.4.6)
Requirement already satisfied: MarkupSafe>=2.0 in c:\users\prajw\appdata\local\programs\python\python312\lib\site-packages (from Jinja2>=3.1.2->flask>=2.2.5->flask_sqlalchemy) (3.0.1)
Downloading flask_sqlalchemy-3.1.1-py3-none-any.whl (25 kB)
Downloading SQLAlchemy-2.0.35-cp312-cp312-win_amd64.whl (2.1 MB)
   ---------------------------------------- 0.0/2.1 MB ? eta -:--:--
   ----- ---------------------------------- 0.3/2.1 MB ? eta -:--:--
   ---------- ----------------------------- 0.5/2.1 MB 2.1 MB/s eta 0:00:01
   -------------------- ------------------- 1.0/2.1 MB 2.1 MB/s eta 0:00:01
   ------------------------------ --------- 1.6/2.1 MB 2.1 MB/s eta 0:00:01
   ---------------------------------------- 2.1/2.1 MB 2.2 MB/s eta 0:00:00
Downloading greenlet-3.1.1-cp312-cp312-win_amd64.whl (299 kB)
Downloading typing_extensions-4.12.2-py3-none-any.whl (37 kB)
Installing collected packages: typing-extensions, greenlet, sqlalchemy, flask_sqlalchemy
Successfully installed flask_sqlalchemy-3.1.1 greenlet-3.1.1 sqlalchemy-2.0.35 typing-extensions-4.12.2
Note: you may need to restart the kernel to use updated packages.

from dateutil import parser  # Add this import for robust datetime parsing

# Initialize the database with the fetched data
def initialize_database(data):
    for item in data:
        # Use dateutil parser to automatically handle various datetime formats
        date_of_sale = parser.isoparse(item['dateOfSale'])

        # Create a new Transaction object for each record
        transaction = Transaction(
            title=item['title'],
            description=item['description'],
            price=item['price'],
            category=item['category'],
            sold=item['sold'],
            date_of_sale=date_of_sale
        )

        # Add to the session and commit to the database
        db.session.add(transaction)
    db.session.commit()

# Initialize the database with seed data
with app.app_context():
    initialize_database(data)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


*****styles


body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    padding: 20px;
  }
  
  .container {
    max-width: 800px;
    margin: 0 auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  }
  
  h1, h2 {
    text-align: center;
  }
  
  .controls {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
  }
  
  #search {
    width: 95%;
    padding: 10px;
    margin-bottom: 10px;
  }
  
  table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 10px;
  }
  
  table th, table td {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: center;
  }
  
  .pagination {
    display: flex;
    justify-content: space-between;
  }
  
  #charts {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
  }
  
  #bar-chart, #pie-chart {
    width: 48%;
  }
  
  canvas {
    width: 100%;
    height: 300px;
  }
  

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*****Transaction

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Transactions</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Product Transactions</h1>
    
    <div class="controls">
      <label for="month">Select Month:</label>
      <select id="month">
        <option value="1">January</option>
        <option value="2">February</option>
        <option value="3">March</option>
        <option value="4">April</option>
        <option value="5">May</option>
        <option value="6">June</option>
        <option value="7">July</option>
        <option value="8">August</option>
        <option value="9">September</option>
        <option value="10">October</option>
        <option value="11">November</option>
        <option value="12">December</option>
      </select>
    </div>

    <input type="text" id="search" placeholder="Search transactions..." />
    
    <div id="transactions-table">
      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Price</th>
            <th>Sold</th>
          </tr>
        </thead>
        <tbody id="transactions-body">
          <!-- Transactions will be dynamically populated here -->
        </tbody>
      </table>
      <div class="pagination">
        <button id="prev-page" disabled>Previous</button>
        <button id="next-page">Next</button>
      </div>
    </div>

    <div id="statistics">
      <h2>Statistics</h2>
      <p id="total-sale">Total Sale: $0.00</p>
      <p id="sold-items">Sold Items: 0</p>
      <p id="not-sold-items">Not Sold Items: 0</p>
    </div>

    <div id="charts">
      <div id="bar-chart">
        <h2>Price Range Bar Chart</h2>
        <canvas id="barChartCanvas"></canvas>
      </div>

      <div id="pie-chart">
        <h2>Category Distribution Pie Chart</h2>
        <canvas id="pieChartCanvas"></canvas>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="scripts.js"></script>
  <script>
    let currentPage = 1;
    const transactionsPerPage = 10;

    async function fetchTransactions(month, page = 1) {
        const response = await fetch(`http://localhost:5000/transactions?month=${month}&page=${page}`);
        const transactions = await response.json();
        
        const table = document.getElementById("transactions-body");
        table.innerHTML = "";  // Clear existing data
    
        transactions.items.forEach(transaction => {
            const row = `<tr>
                            <td>${transaction.title}</td>
                            <td>${transaction.description}</td>
                            <td>${transaction.price}</td>
                            <td>${transaction.sold ? "Sold" : "Not Sold"}</td>
                        </tr>`;
            table.innerHTML += row;
        });

        updateStatistics(transactions.items);
        updatePagination(transactions.totalPages);
    }

    function updateStatistics(transactions) {
        const totalSale = transactions.reduce((acc, transaction) => acc + (transaction.sold ? transaction.price : 0), 0);
        const soldItems = transactions.filter(transaction => transaction.sold).length;
        const notSoldItems = transactions.length - soldItems;

        document.getElementById("total-sale").textContent = `Total Sale: $${totalSale.toFixed(2)}`;
        document.getElementById("sold-items").textContent = `Sold Items: ${soldItems}`;
        document.getElementById("not-sold-items").textContent = `Not Sold Items: ${notSoldItems}`;
    }

    function updatePagination(totalPages) {
        const prevButton = document.getElementById("prev-page");
        const nextButton = document.getElementById("next-page");

        prevButton.disabled = currentPage === 1;
        nextButton.disabled = currentPage === totalPages;

        prevButton.addEventListener("click", () => {
            if (currentPage > 1) {
                currentPage--;
                fetchTransactions(document.getElementById("month").value, currentPage);
            }
        });

        nextButton.addEventListener("click", () => {
            if (currentPage < totalPages) {
                currentPage++;
                fetchTransactions(document.getElementById("month").value, currentPage);
            }
        });
    }

    // Event listener for month selection change
    document.getElementById("month").addEventListener("change", (e) => {
        const month = e.target.value;
        currentPage = 1;  // Reset to page 1 whenever the month changes
        fetchTransactions(month, currentPage);
    });

    // Initial fetch for March (month = 3)
    fetchTransactions(3);
  </script>
</body>
</html>
